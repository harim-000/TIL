 ## PROBLEM
> YoFor two strings **s** and **t**,
> we say "t divides s" if and only if s = t + t + t + ... + t + t (i.e., t is concatenated with itself one or more times).
> Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.
 

### Example 1:

>Input: str1 = "ABCABC", str2 = "ABC"
>Output: "ABC"

### Example 2:

> Input: str1 = "ABABAB", str2 = "ABAB"
> Output: "AB"

### Example 3:

> Input: str1 = "LEET", str2 = "CODE"
> Output: ""

**Constraints:**
> 1 <= str1.length, str2.length <= 1000
> str1 and str2 consist of English uppercase letters.


```java
class Solution {
    public String gcdOfStrings(String str1, String str2) {
     
        
        // Step 1: 문자열이 서로 반복으로 만들 수 있는지 확인
        if (!(str1 + str2).equals(str2 + str1)) {
            return "";
        }

        // Step 2: 길이의 최대공약수 구하기
        int gcdLen = gcd(str1.length(), str2.length());

        // Step 3: str1의 앞부분에서 잘라서 반환
        return str1.substring(0, gcdLen);
    

    }
    
    private static int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);
    }
}


```
